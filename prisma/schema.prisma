/**
 * @file schema.prisma
 * @route prisma/schema.prisma
 * @description Define el esquema de la base de datos MySQL usando Prisma. 
 * Incluye tablas para Usuarios, Perfiles, Registros Emocionales, Tareas y Citas.
 * @author Kevin Mariano
 * @version 1.0.4
 * @since 1.0.0
 * @copyright MiauBloom
 */
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =========================================================================
// 1. AUTENTICACIÃ“N Y ROLES (LOGIN/PERFILES)
// =========================================================================

model User {
  id              String    @id @default(uuid()) @db.VarChar(36)
  email           String    @unique
  password        String
  nombreCompleto  String    @map("nombre_completo")
  rol             String
  
  perfilPaciente  PerfilPaciente?
  perfilPsicologo PerfilPsicologo?
  resetTokens     PasswordResetToken[]
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("Users")
}

model PerfilPaciente {
  userId               String    @id @map("user_id") @db.VarChar(36)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fechaNacimiento      DateTime  @map("fecha_nacimiento") @db.Date
  genero               String
  contactoEmergencia   String    @map("contacto_emergencia")
  institucionReferida  String    @default("Privada")
  nombreInstitucion    String?   @map("nombre_institucion")
  nicknameAvatar       String    @map("nickname_avatar")
  fotoPerfil           String?   @default("/assets/avatar-paciente.png") @map("foto_perfil")
  horarioUso           String?   @default("No especificado") @map("horario_uso")
  duracionUso          String?   @default("No especificado") @map("duracion_uso")
  
  psicologoAsignadoId  String?   @map("psicologo_asignado_id") @db.VarChar(36)
  psicologoAsignado    PerfilPsicologo? @relation(fields: [psicologoAsignadoId], references: [userId], onDelete: SetNull, name: "AssignedPatients")

  registrosEmocionales RegistroEmocional[]
  tareasRecibidas      Tarea[]   @relation("PacienteTareas")
  citasInvolucradas    Cita[]    @relation("PacienteCitas")

  perfilCompletadoAt   DateTime  @default(now()) @map("perfil_completado_at")

  @@map("Perfiles_Paciente")
}

model PerfilPsicologo {
  userId               String    @id @map("user_id") @db.VarChar(36)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  identificacion       String    @unique
  registroProfesional  String    @map("registro_profesional") @unique
  especialidad         String
  tituloUniversitario  String    @map("titulo_universitario")
  nicknameAvatar       String?   @default("Avatar") @map("nickname_avatar")
  fotoPerfil           String?   @default("/assets/avatar-psicologo.png") @map("foto_perfil")
  horarioUso           String?   @default("No especificado") @map("horario_uso")
  duracionUso          String?   @default("No especificado") @map("duracion_uso")
  
  pacientesAsignadosIds Json?    @map("pacientes_asignados_ids")
  
  pacientesAsignados   PerfilPaciente[] @relation("AssignedPatients")
  tareasAsignadas      Tarea[]          @relation("PsicologoTareas")
  citasAgendadas       Cita[]           @relation("PsicologoCitas")
  
  perfilCompletadoAt   DateTime  @default(now()) @map("perfil_completado_at")

  @@map("Perfiles_Psicologo")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String   @map("user_id") @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("Password_Reset_Tokens")
}

// =========================================================================
// 2. REGISTRO Y SEGUIMIENTO EMOCIONAL
// =========================================================================

model RegistroEmocional {
  id                  Int      @id @default(autoincrement())
  pacienteId          String   @map("paciente_id") @db.VarChar(36)
  paciente            PerfilPaciente @relation(fields: [pacienteId], references: [userId])

  timestamp           DateTime @default(now())
  emocionPrincipal    String   @map("emocion_principal")
  nivelAfectacion     Int      @map("nivel_afectacion")
  queSucedio          String?  @map("que_sucedio") @db.Text
  compartirPsicologo  Boolean  @map("compartir_psicologo") @default(false)
  
  jardinMetadata      Json?    @map("jardin_metadata")

  createdAt           DateTime @default(now()) @map("created_at")

  @@map("Registros_Emocionales")
}

// =========================================================================
// 3. INTERVENCIONES Y CITAS
// =========================================================================

model Tarea {
  id           Int      @id @default(autoincrement())
  psicologoId  String   @map("psicologo_id") @db.VarChar(36)
  pacienteId   String   @map("paciente_id") @db.VarChar(36)
  
  descripcion  String   @db.Text
  fechaLimite  DateTime @map("fecha_limite") @db.Date
  estado       String   @default("Pendiente")

  psicologo    PerfilPsicologo @relation(fields: [psicologoId], references: [userId], name: "PsicologoTareas")
  paciente     PerfilPaciente  @relation(fields: [pacienteId], references: [userId], name: "PacienteTareas")

  createdBy    String   @map("created_by") @db.VarChar(36)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("Tareas")
}

model Cita {
  id           Int      @id @default(autoincrement())
  psicologoId  String   @map("psicologo_id") @db.VarChar(36)
  pacienteId   String   @map("paciente_id") @db.VarChar(36)
  
  fechaHora    DateTime @map("fecha_hora")
  detalles     String?  @db.Text
  creadaPor    String   @map("creada_por")
  estado       String   @default("Programada")

  psicologo    PerfilPsicologo @relation(fields: [psicologoId], references: [userId], name: "PsicologoCitas")
  paciente     PerfilPaciente  @relation(fields: [pacienteId], references: [userId], name: "PacienteCitas")

  createdAt    DateTime @default(now()) @map("created_at")
  
  @@map("Citas")
}