/**
 * @file schema.prisma
 * @route prisma/schema.prisma
 * @description Define el esquema de la base de datos MySQL usando Prisma.
 * Incluye tablas para Auth, Perfiles (Patient/Psychologist), Catálogo de Emociones, Targets AR,
 * Registros Emocionales (histórico), Tareas, Citas, y un log de Auditoría.
 * @author Kevin Mariano
 * @version 1.0.1
 * @since 1.0.0
 * @copyright MiauBloom
 */
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  patient
  psychologist
  admin
}

enum Gender {
  male
  female
  other
  prefer_not_to_say
}

enum PracticeType {
  private
  public
  both
}

enum IdentificationDifficulty {
  very_easy   @map("muy_facil")
  easy        @map("facil")
  somewhat_difficult @map("algo_dificil")
  very_difficult @map("muy_dificil")
}

enum CreationVia {
  app
  ar_scan   @map("ar_scan")
  reminder
}

enum RelationshipStatus {
  active    @map("activa")
  paused    @map("pausada")
  finished  @map("finalizada")
}

enum AppointmentStatus {
  scheduled @map("programada")
  confirmed @map("confirmada")
  completed @map("completada")
  cancelled @map("cancelada")
  no_show   @map("no_asistio")
}

enum RequestedBy {
  patient
  psychologist
}

enum TaskType {
  daily
  weekly
  single    @map("unica")
}

enum Priority {
  low     @map("baja")
  medium  @map("media")
  high    @map("alta")
  critical @map("critica")
  normal
}

enum NotificationType {
  appointment @map("cita")
  task      @map("tarea")
  message   @map("mensaje")
  alert     @map("alerta")
  reminder  @map("recordatorio")
}

enum MessageType {
  text
  alert
  system
}

enum AnalysisTrend {
  improving @map("mejorando")
  stable
  worsening @map("empeorando")
}

// =========================================================================
// 1. AUTHENTICATION AND PROFILES (Roles y Autenticación)
// =========================================================================

// Tabla principal de usuarios (auth.users)
model User {
  id               String   @id @default(uuid()) @db.VarChar(36)
  email            String   @unique
  password         String   @map("password")
  role             Role     @default(patient)
  full_name        String   @map("full_name")
  avatar_url       String?  @map("avatar_url")
  institution      String?
  onboarding_completed Boolean @default(false) @map("onboarding_completed")

  // Relaciones
  patientProfile   PatientProfile?
  psychologistProfile PsychologistProfile?
  resetTokens      PasswordResetToken[]
  notifications    Notification[]     @relation("UserNotifications")
  sentMessages     ChatMessage[]      @relation("SenderMessages")
  receivedMessages ChatMessage[]      @relation("RecipientMessages")
  auditLogs        AuditLog[]

  // Auditoría
  created_at        DateTime @default(now()) @map("created_at")
  updated_at        DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(uuid()) @db.VarChar(36)
  user_id   String   @map("user_id") @db.VarChar(36)
  user      User     @relation(fields: [user_id], references: [id])
  token     String   @unique
  expires_at DateTime @map("expires_at")
  created_at DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

// Patient Specific Information (Historial y preferencias)
model PatientProfile {
  user_id                   String   @id @map("user_id") @db.VarChar(36)
  user                      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  date_of_birth             DateTime @map("date_of_birth") @db.Date
  gender                    Gender?
  phone                     String?
  emergency_contact         String?  @map("emergency_contact")
  previous_diagnosis        String?  @map("previous_diagnosis")
  time_since_diagnosis_months Int?     @map("time_since_diagnosis_months")
  preferred_use_schedule    Json     @map("preferred_use_schedule") @db.Json @default("{\"maniana\": false, \"tarde\": false, \"noche\": false}")
  preferred_use_duration    String?  @map("preferred_use_duration") @default("10-20_minutes")
  avatar_nickname           String   @map("avatar_nickname") @default("Nikky")
  avatar_configuration      Json?    @map("avatar_configuration") @db.Json @default("{}")

  // Relaciones (La relación N:M es manejada por 'relationships')
  emotionalRecords          EmotionalRecord[]
  relationships             PatientPsychologistRelationship[] @relation("PatientRelationship")
  appointments              Appointment[]             @relation("PatientAppointments")
  tasks                     TherapeuticTask[]         @relation("PatientTasks")
  sessions                  TherapySession[]          @relation("PatientSessions")
  analysis                  EmotionalAnalysis[]
  avatarCustomizations      PatientAvatarCustomization[]

  // Auditoría
  perfilCompletadoAt        DateTime @default(now()) @map("perfil_completado_at")
  created_at                DateTime @default(now()) @map("created_at")
  updated_at                DateTime @updatedAt @map("updated_at")

  @@map("patient_profiles")
}

// Psychologist Specific Information
model PsychologistProfile {
  user_id                   String   @id @map("user_id") @db.VarChar(36)
  user                      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  license_number            String?  @map("license_number") @unique
  specialty                 String?
  university_degree         String?  @map("university_degree")
  university                String?
  graduation_year           Int?     @map("graduation_year")
  practice_type             PracticeType? @map("practice_type")
  patient_capacity          Int      @map("patient_capacity") @default(20)
  current_patients          Int      @map("current_patients") @default(0)

  // Relaciones
  relationships             PatientPsychologistRelationship[] @relation("PsychologistRelationship")
  appointments              Appointment[]             @relation("PsychologistAppointments")
  tasks                     TherapeuticTask[]         @relation("PsychologistTasks")
  sessions                  TherapySession[]          @relation("PsychologistSessions")

  // Auditoría
  perfilCompletadoAt        DateTime @default(now()) @map("perfil_completado_at")
  created_at                DateTime @default(now()) @map("created_at")
  updated_at                DateTime @updatedAt @map("updated_at")

  @@map("psychologist_profiles")
}

// =========================================================================
// 2. EMOTIONAL TRACKING & AR/3D GAME (Motor del Jardín Emocional)
// =========================================================================

// Catalog of Emotions
model EmotionCatalog {
  id                   String @id @default(uuid()) @db.VarChar(36)
  name                 String @unique
  category             String
  color_hex            String @map("color_hex")
  icon_3d_url          String? @map("icon_3d_url")
  description          String?
  is_active            Boolean @default(true) @map("is_active")

  // Relaciones
  emotionalRecords     EmotionalRecord[]
  analysisPredominant  EmotionalAnalysis[]
  emotionTargets       EmotionTarget[] 

  created_at           DateTime @default(now()) @map("created_at")

  @@map("emotion_catalog")
}

// Scannable AR Targets (Emotion Cards)
model EmotionTarget {
  id                   String @id @default(uuid()) @db.VarChar(36)
  emotion_id           String @map("emotion_id") @db.VarChar(36)
  target_ar_url        String @map("target_ar_url")
  target_name          String

  // Relaciones
  emotion              EmotionCatalog @relation(fields: [emotion_id], references: [id])

  created_at           DateTime @default(now()) @map("created_at")

  @@map("emotion_targets")
}

// Daily Emotional Record (Historial del Paciente)
model EmotionalRecord {
  id                       String   @id @default(uuid()) @db.VarChar(36)
  patient_id               String   @map("patient_id") @db.VarChar(36)
  emotion_id               String   @map("emotion_id") @db.VarChar(36)
  intensity                Int      @db.Int
  recorded_at              DateTime @default(now()) @map("recorded_at")
  context                  String?
  identification_difficulty IdentificationDifficulty? @map("identification_difficulty")
  associated_activity      String?  @map("associated_activity")
  accompanied              Boolean?
  identification_certainty String?  @map("identification_certainty")
  event_affect             Int?     @map("event_affect") @db.Int
  additional_responses     Json?    @map("additional_responses") @db.Json @default("{}")
  notes                    String?
  created_via              CreationVia? @map("created_via") @default(app)

  // Relaciones
  patient                  PatientProfile @relation(fields: [patient_id], references: [user_id], onDelete: Cascade)
  emotion                  EmotionCatalog @relation(fields: [emotion_id], references: [id])

  // Auditoría
  created_at               DateTime @default(now()) @map("created_at")

  @@index([patient_id, recorded_at])
  @@map("emotional_records")
}


// =========================================================================
// 3. INTERVENTIONS & APPOINTMENTS (Citas y Tareas)
// =========================================================================

// Relationship between patient and psychologist (N:M - El historial de relaciones)
model PatientPsychologistRelationship {
  id                String   @id @default(uuid()) @db.VarChar(36)
  patient_id        String   @map("patient_id") @db.VarChar(36)
  psychologist_id   String   @map("psychologist_id") @db.VarChar(36)
  start_date        DateTime @default(now()) @map("start_date") @db.Date
  end_date          DateTime? @map("end_date") @db.Date
  status            RelationshipStatus @default(active)
  psychologist_notes String?  @map("psychologist_notes")

  // Relaciones
  patient           PatientProfile @relation("PatientRelationship", fields: [patient_id], references: [user_id], onDelete: Cascade)
  psychologist      PsychologistProfile @relation("PsychologistRelationship", fields: [psychologist_id], references: [user_id], onDelete: Cascade)
  chat_messages     ChatMessage[]

  // Auditoría
  created_at        DateTime @default(now()) @map("created_at")
  updated_at        DateTime @updatedAt @map("updated_at")

  @@unique([patient_id, psychologist_id, status])
  @@map("patient_psychologist_relationships")
}

// Scheduled Appointments
model Appointment {
  id                String   @id @default(uuid()) @db.VarChar(36)
  patient_id        String   @map("patient_id") @db.VarChar(36)
  psychologist_id   String   @map("psychologist_id") @db.VarChar(36)
  datetime          DateTime @map("datetime")
  duration_minutes  Int      @map("duration_minutes") @default(60)
  type              String   @default("virtual")
  status            AppointmentStatus @default(scheduled)
  motive            String?
  patient_notes     String?  @map("patient_notes")
  psychologist_notes String?  @map("psychologist_notes")
  requested_by      RequestedBy? @map("requested_by")
  reminder_sent     Boolean @map("reminder_sent") @default(false)

  // Relaciones
  patient           PatientProfile @relation("PatientAppointments", fields: [patient_id], references: [user_id], onDelete: Cascade)
  psychologist      PsychologistProfile @relation("PsychologistAppointments", fields: [psychologist_id], references: [user_id], onDelete: Cascade)
  session_associated TherapySession?

  // Auditoría
  created_at        DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([psychologist_id, datetime])
  @@index([patient_id, datetime])
  @@map("appointments")
}

// Therapeutic Tasks
model TherapeuticTask {
  id                String   @id @default(uuid()) @db.VarChar(36)
  patient_id        String   @map("patient_id") @db.VarChar(36)
  psychologist_id   String   @map("psychologist_id") @db.VarChar(36)
  title             String
  description       String?
  type              TaskType @default(single)
  assigned_date     DateTime @default(now()) @map("assigned_date") @db.Date
  due_date          DateTime? @map("due_date") @db.Date
  completed         Boolean  @default(false)
  completed_date    DateTime? @map("completed_date")
  patient_notes     String?  @map("patient_notes")
  priority          Priority @default(medium)

  // Relaciones
  patient           PatientProfile @relation("PatientTasks", fields: [patient_id], references: [user_id], onDelete: Cascade)
  psychologist      PsychologistProfile @relation("PsychologistTasks", fields: [psychologist_id], references: [user_id], onDelete: Cascade)

  // Auditoría
  created_at        DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([patient_id, completed])
  @@map("therapeutic_tasks")
}

// =========================================================================
// 4. AVATAR CUSTOMIZATION & AUDITING (Personalización y Trazabilidad)
// =========================================================================

// Catalogue of Avatar Assets/Accessories
model AvatarAsset {
  id                String   @id @default(uuid()) @db.VarChar(36)
  name              String   @unique
  category          String
  asset_url         String   @map("asset_url")
  price             Int      @default(0)

  // Relaciones
  patientCustomizations PatientAvatarCustomization[]

  created_at        DateTime @default(now()) @map("created_at")

  @@map("avatar_assets")
}

// Link between a Patient and their owned/selected Assets
model PatientAvatarCustomization {
  id                String   @id @default(uuid()) @db.VarChar(36)
  patient_id        String   @map("patient_id") @db.VarChar(36)
  asset_id          String   @map("asset_id") @db.VarChar(36)
  is_equipped       Boolean  @map("is_equipped") @default(false)
  purchased_at      DateTime @map("purchased_at") @default(now())

  // Relaciones
  patient           PatientProfile @relation(fields: [patient_id], references: [user_id], onDelete: Cascade)
  asset             AvatarAsset    @relation(fields: [asset_id], references: [id], onDelete: Cascade)

  @@unique([patient_id, asset_id])
  @@map("patient_avatar_customizations")
}

// System Audit Log for critical actions
model AuditLog {
  id                String   @id @default(uuid()) @db.VarChar(36)
  user_id           String?  @map("user_id") @db.VarChar(36) 
  action            String
  table_name        String?  @map("table_name")
  record_id         String?  @map("record_id") @db.VarChar(36)
  details           Json?    @db.Json

  // Relaciones
  user              User?    @relation(fields: [user_id], references: [id], onDelete: SetNull) 

  created_at        DateTime @default(now()) @map("created_at")

  @@index([user_id, created_at])
  @@map("audit_logs")
}

// =========================================================================
// 5. COMMUNICATION, SESSIONS AND ANALYSIS (Comunicación y Sesiones)
// =========================================================================

// Chat Messages (incluye posibilidad de contacto a Admin si el remitente/destinatario es Admin)
model ChatMessage {
  id              String   @id @default(uuid()) @db.VarChar(36)
  relationship_id String   @map("relationship_id") @db.VarChar(36)
  sender_id       String   @map("sender_id") @db.VarChar(36)
  recipient_id    String   @map("recipient_id") @db.VarChar(36)
  message         String
  type            MessageType @default(text)
  is_read         Boolean  @map("is_read") @default(false)
  read_at         DateTime? @map("read_at")
  is_alert        Boolean  @map("is_alert") @default(false)

  // Relaciones
  relationship    PatientPsychologistRelationship @relation(fields: [relationship_id], references: [id], onDelete: Cascade)
  sender          User     @relation("SenderMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  recipient       User     @relation("RecipientMessages", fields: [recipient_id], references: [id], onDelete: Cascade)

  // Auditoría
  created_at      DateTime @default(now()) @map("created_at")

  @@index([relationship_id, created_at])
  @@map("chat_messages")
}

// Therapy Sessions
model TherapySession {
  id                      String   @id @default(uuid()) @db.VarChar(36)
  appointment_id          String?  @map("appointment_id") @unique @db.VarChar(36)
  patient_id              String   @map("patient_id") @db.VarChar(36)
  psychologist_id         String   @map("psychologist_id") @db.VarChar(36)
  session_date            DateTime @map("session_date")
  actual_duration_minutes Int?     @map("actual_duration_minutes")
  objectives              String?
  interventions           String?
  observations            String?
  patient_state           String?  @map("patient_state")
  action_plan             String?  @map("action_plan")
  suggested_next_session  DateTime? @map("suggested_next_session") @db.Date

  // Relaciones
  appointment             Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)
  patient                 PatientProfile @relation("PatientSessions", fields: [patient_id], references: [user_id], onDelete: Cascade)
  psychologist            PsychologistProfile @relation("PsychologistSessions", fields: [psychologist_id], references: [user_id], onDelete: Cascade)

  // Auditoría
  created_at              DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("therapy_sessions")
}

// Emotional Analysis
model EmotionalAnalysis {
  id                      String   @id @default(uuid()) @db.VarChar(36)
  patient_id              String   @map("patient_id") @db.VarChar(36)
  period_start            DateTime @map("period_start") @db.Date
  period_end              DateTime @map("period_end") @db.Date
  predominant_emotion_id  String?  @map("predominant_emotion_id") @db.VarChar(36)
  total_records           Int      @map("total_records") @default(0)
  emotion_distribution    Json?    @map("emotion_distribution") @db.Json @default("{}")
  average_intensity       Decimal? @map("average_intensity") @db.Decimal(3, 2) 
  days_with_records       Int      @map("days_with_records") @default(0)
  trend                   AnalysisTrend?
  automatically_generated Boolean @map("automatically_generated") @default(true)

  // Relaciones
  patient                 PatientProfile @relation(fields: [patient_id], references: [user_id], onDelete: Cascade)
  predominant_emotion     EmotionCatalog? @relation(fields: [predominant_emotion_id], references: [id])

  // Auditoría
  created_at              DateTime @default(now()) @map("created_at")

  @@map("emotional_analysis")
}

// Notifications
model Notification {
  id            String   @id @default(uuid()) @db.VarChar(36)
  user_id       String   @map("user_id") @db.VarChar(36)
  type          NotificationType
  title         String
  message       String
  is_read       Boolean  @map("is_read") @default(false)
  read_at       DateTime? @map("read_at")
  action_url    String?   @map("action_url")
  priority      Priority @default(normal)
  metadata      Json?    @db.Json @default("{}")

  // Relación
  user          User     @relation("UserNotifications", fields: [user_id], references: [id], onDelete: Cascade)

  // Auditoría
  created_at    DateTime @default(now()) @map("created_at")

  @@index([user_id, is_read, created_at])
  @@map("notifications")
}